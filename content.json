{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/05/02/hello-world/"},{"title":"My 2nd Post For Testing","text":"Basic 123456789101112131415161718192021git initgit add #只有add后再commit，修改才会被提交git commitgit rmgit reset --hard HEAD^ / SHA1 git reset filename#git reset命令既可以回退版本，也可以把暂存区的修改撤回到工作区。#当我们用HEAD时，表示最新的版本git restore --stage(--worktree) &lt;filename&gt;#丢弃工作区修改git statusgit diff filenamegit loggit reflog #查看历史命令git push -u origin master #第一次推送master分支的所有内容, -u参数只在第一次push时使用git remote -v #查看远程仓库信息git remote rm &lt;name&gt; #删除远程库（解除本地和远程的绑定关系） 隐藏目录 .git (git的版本库) Branch 可视化理解 git 操作 1234567891011121314git switch -c dev -dgit fetch origin mastergit pull origin master# git fetch + git merge。当我们从来源拉取修改时，# 我们首先是像 git fetch 那样取回所有数据，然后最新的修改会自动合并到本地分支中git rebase #将当前分支的提交复制到指定的分支之上#变基与合并有一个重大的区别：Git 不会尝试确定要保留或不保留哪些文件。#我们执行 rebase 的分支总是含有我们想要保留的最新近的修改！#这样我们不会遇到任何合并冲突，而且可以保留一个漂亮的、线性的 Git 历史记录。 ../images/postpic/1.gif)","link":"/2021/05/02/My-2nd-Post-For-Testing/"}],"tags":[{"name":"Testing","slug":"Testing","link":"/tags/Testing/"}],"categories":[{"name":"daily","slug":"daily","link":"/categories/daily/"}]}